THIS IS A SORT OF CHEAT SHEET OF THE COMMANDS AND INFORMATION THAT I HAVE LEARNED OVER THE COURSE OF THE DJANGO SECTION OF THE PYTHON STACK
THERE ARE LINKS TO SOME OF THE RESOURCES THAT CAN BE USED IF I DEEMED THEM NECESSARY TO INCLUDE THE SPECIFIED LINE
THE TRUE DOCUMENTATION FOR DJANGO CAN BE FOUND AT THE LINK BELOW:
https://www.djangoproject.com/
YOU CAN EASILY TRAVERSE THE WEBSITE TO FIND THE INFO THAT YOU NEED
ALSO WE ARE USING DJANGO VERSION 2.2 IN THE BOOTCAMP
IF YOU ARE LOOKING TO PATH TO THE SPECIFIED VERSION SIMPLY TYPE:
/EN/$VERSION NUMBER$ 
IN THE ADDRESS BAR TO BE TAKEN TO THAT VERSION.
LEGEND:
>- starts lines to be potentially entered in to term/cmd 
activate django env
>cd into django folder
django-admin startproject $your_project_name_here$
>cd into project
    make sure that you are in the file with the manage.py file
>python manage.py startapp $your_app_name_here$
now go into editor
find the settings.py file of the project
scroll down to INSTALLED_APPS
type in your app as a new line in the string
go to the urls.py file of the PROJECT 
make sure to comment out or delete (from django.contrib import admin)
and 
>path('admin/', admin.sites.urls)
the lines should look like this below-
>from django.urls import path, include
>urlpatterns =[
    path('', include ('$your_app_name_here$.urls')),
]
IF YOU ARE UTILIZING A MANY APPS ON A SINGLE PROJECT-
    MAKE SURE THAT YOU ARE CREATING A DIFFERENT PATH FOR THE FOLLOWING APPS TO BE PATHED TO. 
    THIS WILL MAKE IT EASIER LATER ON.
IN YOUR APP FOLDER
>create a new urls.py file
INPUT THE FOLLOWING INFORMATION
$
>from django.urls import path
>from . import views (the . means the root directory)
>urlpatterns = [
    path('', views.index),
]
$
NOW MOVE TO THE APP'S VIEWS.PY FILE 
$
from django.shortcuts import render, HttpResponse, redirect
$$$$$$$$(there will also be some other "built-in" functions that you can bring into the file on the following lines. Make sure that they are above all other functions.)
>def index(request):
    return render(request, "index.html")
$
CREATE A NEW FOLDER WITHIN THE APP YOU ARE WORKING IN,
NAME THE FOLDER templates
CREATE A FILE WITHIN THAT FOLDER
NAME THE FILE WHATEVER YOU PUT IN THE FIRST RETURN LINE IN YOUR APPS VIEWS.PY FILE OR LINE 38
after this you can run the following line to make sure your app will run
>python manage.py runserver

IF EVERYTHING HAS GONE ACCORDING TO PLAN YOU WILL SEE A BLANK PAGE OR A PAGE CONTAINING THE HTML THAT YOU WROTE IN THE INDEX.HTML FILE

LOAD STATIC 
CREATE A NEW FOLDER WITHIN YOUR APP CALLED STATIC
THIS WILL HOUSE ALL OF THE CSS AND JS FILES THAT YOU WOULD LIKE TO USE FOR YOUR PAGE
YOU WILL NEED TO ADD THE FOLLOWING LINE IN THE HEADER OF THE HTML FILES IN ORDER TO ACCESS THESE STATIC FILES
you can create subfolders within the static folder-
REMEMBER THAT IF YOU DO CREATE SUBFOLDERS YOU WILL NEED TO CALL THEM IN JINJA IN THE HTML LINK TAG
{% load static %}
NOW USE A LINK TAG TO LINK THE NECESSARY ITEMS AS FOLLOWS
CSS-
    <link rel="stylesheet" href="{% static 'style.css' %}">
                            OR
    <link rel="stylesheet" href="{% static '$folder_name$/style.css' %}">(if you had subfolders in your static folder)
JS-
    <script src="{% static 'script.js' %}"></script>
                        OR
    <script src="{% static '$folder_name$/script.js' %}"></script>(if you had subfolders in your static folder)

ONCE THIS IS COMPLETE ADD THE FOLLOWING LINES BELOW THE STATIC LINE IN THE PROJECTS SETTINGS.PY FILE
>STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')
-I DONT EXACTLY KNOW WHAT THIS IS DOING, HOWEVER IT IS CRUCIAL THAT YOU ADD THESE LINES IN, IN ORDER FOR DJANGO TO FIND THE STATIC FILE IN YOUR ROOT directory

MIGRATIONS & SESSION- 
HREF= https://docs.djangoproject.com/en/2.2/topics/http/sessions/
>python manage.py migrate
>request.sessions[''] 
    USED TO STORE DATA TEMPORARILY ACROSS REDIRECTS; CAN BE LINKED TO POST DATA USING VARIATIONS OF THE FOLLOWING LINES IN YOUR FUNCTIONS
>def some_function(request):
    request.session['name'] = request.POST['name']
    request.session['counter'] = 100
^ THIS IS JUST AN EXAMPLE AND SHOULDNT BE DIRECTLY IMPLEMENTED IN CODE DUH!
BELOW ARE SOME COMMANDS THAT YOU CAN USE WITH SESSION
>request.session['key'] = 'value'
    $Stores 'value' in request.session['key'].
>if 'key' in request.session
    $Useful for testing if key is in request.session or not.
>{{ request.session.name }}
    $Use dot notation . to access request.session keys from templates, square brackets [] aren’t allowed there.
>del request.session['key']
    $Deletes a session key if it exists, throws a KeyError if it doesn’t.
>request.session.flush()
    $Clears all data from session.
    $will log users out- as of django 1.8
>request.session.clear()
    $cleans out expired sessions
THERE ARE MANY MORE USABLE COMMANDS REFERENCE THE LINK ABOVE
ORM-
models.model
PLEASE REFERENCE THE FOLLOWING LINK IF YOU NEED MORE RESOURCES:
https://docs.djangoproject.com/en/2.2/topics/db/models/
^THIS^ IS A GENERIC LINK TO THE MODELS PAGE OF THE DJANGOPROJECT DOCS, DIG DEEPER AS NEEDED.
FROM THE APPS MODELS.PY FILE 
you can easily create classes and to design and create objects within the infrastructure iteself. these items will then be transmitted to the settings.py file
most of the work can be done directly within django instead of having to create a diagram using MySQL and then transporting it over to django
(although the latter is recommended)
when using the models.py file make sure your code is similar to the following(overall structure, leaving out key pair names)
from django.db import models
    
>class Movie(models.Model):
    title = models.CharField(max_length=45)
    description = models.TextField()
    release_date = models.DateTimeField()
    duration = models.IntegerField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

all classes should have created_at and updated_at fields no matter what. 
SOME OF THE FIELDS THAT YOU WILL NEED ARE LISTED BELOW.
REFERENCE THE DOCS FOR MORE INFO
>CharField($max_length$)- set maximum length in ()
>TextField()-no maximum length 
>IntergerField()- holds integer value ?????- more explaination?
>FloatField()- holds float value, good for numbers with varying decimal places(for when you dont know how many decimal places there might be)
>DecimalField()- numbers with fixed decimal places such as currency. (when the decimal places IS KNOWN, ie. money doesnt go below $9.99 (normally))
>BooleanField()- holds boolean value, (used mainly for true/false statements, ie. does this have this?)
>DateTimeField()- capture the date and time that information was transmitted. used in combination with 
>(auto_now=True)
and 
>(auto_now_add=True)
to create the updated_at and created_at pairs

MIGRATIONS(2)-
WITH MODELS SET NOW WE CAN IMPORT THAT DATA DIRECTLY TO THE DB WITH SOME TABLES
DJANGO DOES THIS WITH MINIMAL CODE
enter the following lines seperately after finishing your classes
>python manage.py makemigrations
KIND OF A STAGING COMMAND- ALLOWS DJANGO TO LOOK THRU ANY CHANGES MADE IN OUR CODE SINCE OUR LAST MIGRATIONS
>python manage.py migrate
APPLIES THE CHANGES FOUND USING LINE 147
THINGS TO REMEMBER:
    DONT DELETE MIGRATION FILES, THE SYSTEM WILL DO THIS FOR YOU WHEN YOU MAKE CHANGES. JUST MAKE THE CHANGE AND THE SYSTEM WILL DO THE REST 
    SQLITE IS THE SQL DB FOR DJANGO AUTOMATICALLY. STORES MEMORY LOCALLY. VERY FAST. NOT USED ONCE APP IS READY FOR PRODUCTION. LATER SWITCH TO MySQL
    MODELS AND QUERIES WILL ALWAYS BE THE SAME NO MATTER WHICH DB YOURE USING

DJANGO SHELL-
>python manage.py shell 
WILL BRING UP THE DJANGO SHELL WHERE YOU CAN MANUALLY INPUT DATA
MAKE SURE THAT EVERY SINGLE TIME YOU LAUNCH THE SHELL THAT YOU ENTER THE FOLLOWING LINES
> >>>from $your_app_name_here.models$ import *< 
AS OF RIGHT NOW, SINCE THE DATA THAT WE ARE USING IS MINISCULE WE CAN USE THE * AT THE END TO IMPORT ALL THE DATA
IN PRACTICE THIS IS HIGHLY DISCOURAGED AS IT IMPORTS !!!EVERYTHING!!! 
THE FOLLOWING CAN BE CONSEQUENCES OF IMPORTING ALL:
    -provides opportunity for namespace collisions(variables that are present before importing)
    -may be inefficient, if the number of objects imported is large
    -doesn't explicitly document the origin of the variable/method/class(good to have "self-documentation" for future visits to the code)
IT IS MORE IN PRACTICE TO INDIVIDUALLY CALL OUT THE CLASSES/FILES/FOLDERS THAT YOU WOULD LIKE TO IMPORT AS TO NOT COMMIT THE ABOVE 

CRUD-
Creating,Reading,Updating,Deleting commands used in django shell
SOME OF THE COMMANDS ARE LISTED BELOW
Creating a new record
    >$ClassName$.objects.create(field1="value for field1", field2="value for field2", etc.)
Reading existing records
    Methods that return a single instance of a class
        >$ClassName$.objects.first() - gets the first record in the table
        >$ClassName$.objects.last() - gets the last record in the table
        >$ClassName$.objects.get(id=1) - gets the record in the table with the specified id
            -this method will throw an error unless only and exactly one record matches the query
Methods that return a list of instances of a class
    >$ClassName$.objects.all() - gets all the records in the table
    >$ClassName$.objects.filter(field1="value for field1", etc.) - gets any records matching the query provided
    >$ClassName$.objects.exclude(field1="value for field1", etc.) - gets any records not matching the query provided
Updating an existing record
    >c = $ClassName$.objects.get(id=1)
    >c.field_name = "some new value for field_name"
    >c.save()
Deleting an existing record
    >c = $ClassName$.objects.get(id=1)
    >c.delete()
Other helpful methods
    Displaying records
        >$ClassName$.objects.get(id=1).__dict__ - shows all the values of a single record as a dictionary
        >$ClassName$.objects.all().values() - shows all the values of a QuerySet (i.e. multiple instances)
Ordering records
    >$ClassName$.objects.all().order_by("field_name") - orders by field provided, ascending
    >$ClassName$.objects.all().order_by("-field_name") - orders by field provided, descending

IMPORTING MODELS.PY-
ADD THIS INTO YOUR APP VIEWS.PY FILE
from .models import $CLASS_NAME$
def index(request):
    context = {
        "all_the_$CLASS_NAME$": $CLASS_NAME$.objects.all()
    }
    return render(request, "my_app/index.html", context)

in index.html file
<ul>
{% for class in all_the_$CLASS_NAME$ %}
    <li>{{ class.field }}</li>
{% endfor %}
</ul>
ONE TO MANY RELATIONSHIPS
can use ForeignKey to create a relationship 
EX.
class Author(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
class Book(models.Model):
    title = models.CharField(max_length=255)
>>  author = models.ForeignKey(Author, related_name="books", on_delete = models.CASCADE)
// the on_delete = argument will allow all the information that is associated with that class will be deleted
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
NOTICE LINE 223
THE ForeignKey HAS TO BE IN THE MANY MODEL OF THE RELATIONSHIP
CREATING
this_author = Author.objects.get(id=2)	# get an instance of an Author
my_book = Book.objects.create(title="Little Women", author=this_author)	# set the retrieved author as the author of a new book
    
# or in one line...
my_book = Book.objects.create(title="Little Women", author=Author.objects.get(id=2))

Reading
JOINS IN DJANGO HAPPEN AUTOMATICALLY
RETREIVE INSTANCE OF A Book
some_book = Book.objects.get(id=5)
VIEW BOOK'S Author
some_book.title		# returns a string that is the title of the book
some_book.author	# returns the Author instance associated with this book

some_book.author is an instance of author class that we can now access
some_book.title		# returns a string that is the title of the book
some_book.author	# returns the Author instance associated with this book

WE CAN ALSO SEARCH BASSED OFF OF A ForeignKey RELATIONSHIP

this_author = Author.objects.get(id=2)
books = Book.objects.filter(author=this_author)
    
# one-line version:
books = Book.objects.filter(author=Author.objects.get(id=2))


MANY TO MANY RELATIONSHIPS
can use the ManyToManyField
EX.
class Author(models.Model):
    name = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
class Book(models.Model):
    title = models.CharField(max_length=255)
>>  author = models.ForeignKey(Author, related_name="books", on_delete = models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
NOTICE LINE 236
UNLIKE THE ONE TO MANY RELATIONSHIPS IT DOESNT MATTER WHICH MODEL HAS THE MANYTOMANYFIELD
ADDING RELATIONSHIP BETWEEN THE TWO CLASSES ABOVE
this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
# 2 options that do the same thing:
this_publisher.books.add(this_book)		# add the book to this publisher's list of books
# OR
this_book.publishers.add(this_publisher)	# add the publisher to this book's list of publishers

REMOVING A RELATIONSHIP BETWEEN THEM
this_book = Book.objects.get(id=4)	# retrieve an instance of a book
this_publisher = Publisher.objects.get(id=2)	# retrieve an instance of a publisher
    
# 2 options that do the same thing:
this_publisher.books.remove(this_book)		# remove the book from this publisher's list of books
# OR
this_book.publishers.remove(this_publisher)	# remove the publisher from this book's list of publishers

BOTH DELETING AND ADDING RELATIONSHIPS OPTIONS ARE THE SAME BECAUSE 
MANYTOMANYFIELD IS AUTOMATICALLY SYMMETRICAL DUE TO THERE BEING A RELATIONSHIP BETWEEN BOTH CLASSES 













d1 = Dragon.objects.create(name="Tommy", has_wings=True, fire_color="yellow") 
d2 = Dragon.objects.create(name="Reginald", has_wings=False, fire_color="lime green") 
d3 = Dragon.objects.create(name="George", has_wings=True, fire_color="orange") 
from lecture.models import *
d1 = Dragon.objects.get(id=1) 
d2 =  Dragon.objects.get(id=2)
d4 =  Dragon.objects.get(id=4) 
d5 =  Dragon.objects.get(id=5) 
d6 =  Dragon.objects.get(id=6) 
g1 = Geocache.objects.create(location="Mt Everest", treasure="fair maiden", dragon=d2)
g2 = Geocache.objects.create(location="Denver", treasure="bitcoin", dragon=d1)  
g3 = Geocache.objects.create(location="Mexico", treasure="dragon scales", dragon=d2)  















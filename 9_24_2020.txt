overview of lecture

1) recap of single model
    -make more dragons
2) Dragons own treasure!
    -one to many relationships in models.py
    -re-migrating
    -creating geocaches in the shell
    -reading with geocaches + related_name
3) lets find treasure 
    -many to many relationships in models.py
    -re-migrating
    -creating"finds" in the shell
    -reading with all models together
4) (post-lecture) group activity
    -users(shell)assignment
HW: get what you can get done of week4's material
reading: take a look at the assignment "semi-restful tv shows"

commands ran in lecture for reference

Administrator@JMM MINGW64 ~/Desktop/cd
$ cd ..

Administrator@JMM MINGW64 ~/Desktop
$ cd cd 

Administrator@JMM MINGW64 ~/Desktop/cd
$ cd python

Administrator@JMM MINGW64 ~/Desktop/cd/python
$ cd my_environments/

Administrator@JMM MINGW64 ~/Desktop/cd/python/my_environments
$ source djangoPy3Env/Scripts/activate
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/python/my_environments
$ cd ..
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/python
$ cd ..
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd
$ cd django
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django
$ ls
first_django_project  lecture_project  project_1  project_2  project_3  single_model_orm
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django
$ cd lecture_project/
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py shell
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from models.py import *
Traceback (most recent call last):
  File "<console>", line 1, in <module>
ModuleNotFoundError: No module named 'models'
>>> from lecture.models import *
>>> d1 = Dragon.object.create(name="Tommy", has_wings=True, fire_color="yellow) 
  File "<console>", line 1
    d1 = Dragon.object.create(name="Tommy", has_wings=True, fire_color="yellow)
                                                                              ^
SyntaxError: EOL while scanning string literal
>>>     d1 = Dragon.object.create(name="Tommy", has_wings=True, fire_color="yellow") 
  File "<console>", line 1
    d1 = Dragon.object.create(name="Tommy", has_wings=True, fire_color="yellow")
    ^
IndentationError: unexpected indent
>>> d1 = Dragon.object.create(name="Tommy", has_wings=True, fire_color="yellow")
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Dragon' has no attribute 'object'
>>> d1 = Dragon.objects.create(name="Tommy", has_wings=True, fire_color="yellow") 
>>> d2 = Dragon.objects.create(name="Tommy", has_wings=True, fire_color="yellow")
KeyboardInterrupt
>>> d2 = Dragon.objects.create(name="Reginald", has_wings=False, fire_color="lime green") 
>>> d3 = Dragon.objects.create(name="George", has_wings=True, fire_color="orange") 
>>> exit()
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py makemigrations
Migrations for 'lecture':
  lecture\migrations\0003_geocache.py
    - Create model Geocache
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, lecture, sessions
Running migrations:
  Applying lecture.0003_geocache... OK
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py shell
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from lecture.models import *
>>> d1 = Dragon.objects.get(id=1) 
>>> d2 =  Dragon.objects.get(id=2)
>>> d4 =  Dragon.objects.get(id=4) 
>>> d5 =  Dragon.objects.get(id=5) 
>>> d6 =  Dragon.objects.get(id=6) 
>>> g1 = Geocache.objects.create(location="Mt Everest", treasure="fair maiden", dragon=d2))                     
  File "<console>", line 1
    g1 = Geocache.objects.create(location="Mt Everest", treasure="fair maiden", dragon=d2))
                                                                                          ^
SyntaxError: unmatched ')'
>>> g1 = Geocache.objects.create(location="Mt Everest", treasure="fair maiden", dragon=d2) 
>>> g2 = Geocache.objects.create(location="Denver", treasure="bitcoin", dragon=d1)         
>>> g2 = Geocache.objects.create(location="Mexico", treasure="dragon scales", dragon=d2)    
>>> g1.treasure
'fair maiden'
>>> d1.name
'Hogarth'
>>> d1.owned_geocaches
<django.db.models.fields.related_descriptors.create_reverse_many_to_one_manager.<locals>.RelatedManager object at 0x046A0100>
>>> d1.owned_geocaches.all()
<QuerySet [<Geocache: Geocache object (2)>]>
>>> d2.owned_geocaches.all()
<QuerySet [<Geocache: Geocache object (1)>, <Geocache: Geocache object (3)>]>
>>> d2.name
'Lucy'
>>> d3.name
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'd3' is not defined
>>> d4.name
'Tommy'
>>> d5.name
'Reginald'
>>> d6.name
'George'
>>> exit()
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py make migrations
Unknown command: 'make'
Type 'manage.py help' for usage.
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py makemigrations
Migrations for 'lecture':
  lecture\migrations\0004_geocache_dragons_that_found.py
    - Add field dragons_that_found to geocache
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, contenttypes, lecture, sessions
Running migrations:
  Applying lecture.0004_geocache_dragons_that_found... OK
(djangoPy3Env) 
Administrator@JMM MINGW64 ~/Desktop/cd/django/lecture_project
$ python manage.py shell
Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:43:08) [MSC v.1926 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from lecture.models import *
>>> >>> d1 = Dragon.objects.create(name="Tommy", has_wings=True, fire_color="yellow") 
  File "<console>", line 1
    >>> d1 = Dragon.objects.create(name="Tommy", has_wings=True, fire_color="yellow")
    ^
SyntaxError: invalid syntax
>>> >>> d2 = Dragon.objects.create(name="Reginald", has_wings=False, fire_color="lime green") 
  File "<console>", line 1
    >>> d2 = Dragon.objects.create(name="Reginald", has_wings=False, fire_color="lime green")
    ^
SyntaxError: invalid syntax
>>> >>> d3 = Dragon.objects.create(name="George", has_wings=True, fire_color="orange") 
  File "<console>", line 1
    >>> d3 = Dragon.objects.create(name="George", has_wings=True, fire_color="orange")
    ^
SyntaxError: invalid syntax
>>> >>> from lecture.models import *
  File "<console>", line 1
    >>> from lecture.models import *
    ^
SyntaxError: invalid syntax
>>> >>> d1 = Dragon.objects.get(id=1)
  File "<console>", line 1
    >>> d1 = Dragon.objects.get(id=1)
    ^
SyntaxError: invalid syntax
>>> >>> d2 =  Dragon.objects.get(id=2)
  File "<console>", line 1
    >>> d2 =  Dragon.objects.get(id=2)
    ^
SyntaxError: invalid syntax
>>> >>> d4 =  Dragon.objects.get(id=4)
  File "<console>", line 1
    >>> d4 =  Dragon.objects.get(id=4)
    ^
SyntaxError: invalid syntax
>>> d1 = Dragon.objects.get(id=1)      
>>> d2 =  Dragon.objects.get(id=2)
>>> d4 =  Dragon.objects.get(id=4)
>>> d5 =  Dragon.objects.get(id=5) 
>>> d6 =  Dragon.objects.get(id=6)
>>> d4.name
'Tommy'
>>> d4.found_geocaches.add(g2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'g2' is not defined
>>> g2.name
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'g2' is not defined
>>> g1 = Geocache.objects.create(location="Mt Everest", treasure="fair maiden", dragon=d2)
>>> g2 = Geocache.objects.create(location="Denver", treasure="bitcoin", dragon=d1)
>>> g3 = Geocache.objects.create(location="Mexico", treasure="dragon scales", dragon=d2)  
>>> d4.found_geocaches.all(g2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: all() takes 1 positional argument but 2 were given
>>> d4.found_geocaches.add(g2)
>>> g3.dragons_that_found.add(d5)
>>> g3.dragons_that_found.add(d1)
>>> d4.found_geocaches.all()
<QuerySet [<Geocache: Geocache object (5)>]>
>>> g3.dragons_that_found.all()
<QuerySet [<Dragon: Dragon object (1)>, <Dragon: Dragon object (5)>]>
>>>